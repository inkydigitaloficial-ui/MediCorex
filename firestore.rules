/**
 * @file Overview
 * This ruleset enforces a multi-tenant security model where data is segregated by tenant.
 * Each tenant has an owner who has full control over the tenant's data. Users can be associated with tenants with different roles.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Contains tenant-level information, including the owner.
 * - /tenants/{tenantId}/pacientes/{pacienteId}: Contains patient data specific to a tenant.
 * - /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId}: Contains consultation data for a specific patient.
 * - /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId}: Audit trail for AI summaries.
 * - /tenant_users/{docId}: Maps users to tenants and defines their roles within each tenant. Document ID is not enforced.
 * - /users/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Tenants can only be created and managed by their owner (specified in the ownerId field).
 * - Access to patient and consultation data is restricted to users who are members of the tenant.
 * - Listing of tenants is disallowed for non-owners.
 * - Only the user can read/write their own profile data.
 * - The `tenant_users` collection is used to efficiently determine a user's role within a tenant for authorization.
 *
 * Denormalization for Authorization:
 * - The `TenantUser` entity denormalizes the user-tenant relationship to allow for efficient role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the tenant documents.
     * @path /tenants/{tenantId}
     * @allow (create) User with UID 'user_abc' can create a tenant with ownerId 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, or delete a tenant where they are the owner.
     * @deny (create) User with UID 'user_xyz' cannot create a tenant with ownerId 'user_abc'.
     * @deny (list) Non-owners cannot list tenants.
     * @principle Enforces tenant ownership for write operations and prevents unauthorized listing.
     */
    match /tenants/{tenantId} {
      // Function to check if the user is the owner of the tenant
      function isTenantOwner(tenantId) {
        return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerId == request.auth.uid;
      }

      allow get: if isSignedIn() && isTenantOwner(tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isTenantOwner(tenantId) && resource != null;
      allow delete: if isSignedIn() && isTenantOwner(tenantId) && resource != null;
    }

    /**
     * @description Controls access to patient documents within a tenant.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}
     * @allow (create) User with UID 'user_abc' and role 'admin' in tenant 'tenant_123' can create a patient.
     * @allow (get, list, update, delete) User with UID 'user_abc' and role 'admin' in tenant 'tenant_123' can get, list, update, or delete a patient.
     * @deny (create, update, delete) User with UID 'user_xyz' cannot create, update, or delete patients in tenant 'tenant_123' if they are not a member of the tenant or do not have sufficient privileges.
     * @principle Enforces tenant membership for access to patient data.
     */
    match /tenants/{tenantId}/pacientes/{pacienteId} {
      // Function to check if the user has a role in the tenant
      function hasTenantRole(tenantId) {
        return get(/databases/$(database)/documents/tenant_users/$(request.auth.uid + '_' + tenantId)).data.role != null;
      }

      allow get, list: if isSignedIn() && hasTenantRole(tenantId);
      allow create: if isSignedIn() && hasTenantRole(tenantId);
      allow update: if isSignedIn() && hasTenantRole(tenantId) && resource != null;
      allow delete: if isSignedIn() && hasTenantRole(tenantId) && resource != null;
    }

    /**
     * @description Controls access to consultation documents within a patient's record.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId}
     * @allow (create) User with UID 'user_abc' and role 'admin' in tenant 'tenant_123' can create a consultation.
     * @allow (get, list, update, delete) User with UID 'user_abc' and role 'admin' in tenant 'tenant_123' can get, list, update, or delete a consultation.
     * @deny (create, update, delete) User with UID 'user_xyz' cannot create, update, or delete consultations in tenant 'tenant_123' if they are not a member of the tenant or do not have sufficient privileges.
     * @principle Enforces tenant membership for access to consultation data.
     */
    match /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId} {
      // Function to check if the user has a role in the tenant
      function hasTenantRole(tenantId) {
        return get(/databases/$(database)/documents/tenant_users/$(request.auth.uid + '_' + tenantId)).data.role != null;
      }

      allow get, list: if isSignedIn() && hasTenantRole(tenantId);
      allow create: if isSignedIn() && hasTenantRole(tenantId);
      allow update: if isSignedIn() && hasTenantRole(tenantId) && resource != null;
      allow delete: if isSignedIn() && hasTenantRole(tenantId) && resource != null;
    }

     /**
      * @description Controls access to AI audit trail entries within a patient's record.
      * @path /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId}
      * @allow (create) User with UID 'user_abc' and role 'admin' in tenant 'tenant_123' can create an audit entry.
      * @allow (get, list, update, delete) User with UID 'user_abc' and role 'admin' in tenant 'tenant_123' can get, list, update, or delete an audit entry.
      * @deny (create, update, delete) User with UID 'user_xyz' cannot create, update, or delete audit entries in tenant 'tenant_123' if they are not a member of the tenant or do not have sufficient privileges.
      * @principle Enforces tenant membership for access to AI audit trail data.
      */
    match /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId} {
       // Function to check if the user has a role in the tenant
      function hasTenantRole(tenantId) {
        return get(/databases/$(database)/documents/tenant_users/$(request.auth.uid + '_' + tenantId)).data.role != null;
      }

      allow get, list: if isSignedIn() && hasTenantRole(tenantId);
      allow create: if isSignedIn() && hasTenantRole(tenantId);
      allow update: if isSignedIn() && hasTenantRole(tenantId) && resource != null;
      allow delete: if isSignedIn() && hasTenantRole(tenantId) && resource != null;
    }

    /**
     * @description Controls access to the tenant_users collection. This collection maps users to tenants and assigns roles.
     * @path /tenant_users/{docId}
     * @allow (create) Any signed-in user can create a tenant_user document.
     * @allow (get, list, update, delete) Any signed-in user can get, list, update, or delete a tenant_user document.
     * @principle Allows anyone to create/modify tenant user mappings.
     */
    match /tenant_users/{docId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, or delete their own profile document.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot create, get, update, or delete the profile document of user 'user_abc'.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      // Function to check if the user is the owner of the profile
      function isOwner(userId) {
        return userId == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    // Define the isSignedIn function
    function isSignedIn() {
      return request.auth != null;
    }
  }
}