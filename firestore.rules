/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on resource ownership and roles,
 * while relaxing data validation to enable rapid prototyping. Data validation is
 * limited to relational integrity checks (e.g., creatorId, tenantId) that are
 * critical for security.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Represents a clinic. Owned by a user (ownerId).
 * - /tenants/{tenantId}/pacientes/{pacienteId}: Patients belonging to a tenant.
 * - /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId}: Consultations for a specific patient.
 * - /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId}: AI Audit entries for AI actions on the patient.
 * - /tenants/{tenantId}/agendamentos/{agendamentoId}: Appointments for a tenant.
 * - /tenant_users/{docId}: Maps users to tenants and their roles within each tenant.  The `docId` is not enforced, and can be auto-generated.
 * - /users/{userId}: User profiles.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - The `tenant_users` collection is used to efficiently determine user roles within tenants without complex queries.
 * - The default security posture is strict: all access must be explicitly allowed.
 *
 * Denormalization for Authorization:
 * - TenantUser documents are used to quickly determine a user's role in a tenant.  This avoids having to query subcollections or perform complex joins in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource (based on UID).
     */
    function isOwner(resourceOwnerId) {
      return isSignedIn() && request.auth.uid == resourceOwnerId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     */
    function isExistingOwner(resourceOwnerId) {
        return isOwner(resourceOwnerId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has a specific role within a tenant.
     */
    function hasTenantRole(tenantId, role) {
      return get(/databases/$(database)/documents/tenant_users/$(request.auth.uid + '_' + tenantId)).data.role == role;
    }

    /**
     * @description Checks if the authenticated user is an admin or the owner within a tenant.
     */
     function isAdminOrOwner(tenantId) {
        return hasTenantRole(tenantId, 'admin') || hasTenantRole(tenantId, 'owner');
     }

     /**
      * @description Checks if the authenticated user has any valid role within a tenant.
      */
    function isValidTenantUser(tenantId) {
      return get(/databases/$(database)/documents/tenant_users/$(request.auth.uid + '_' + tenantId)).data.tenantId == tenantId
        && get(/databases/$(database)/documents/tenant_users/$(request.auth.uid + '_' + tenantId)).data.userId == request.auth.uid;
    }


    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (create) - Authenticated user can create a tenant if they are setting themselves as the owner.
     * @allow (get) - Anyone can read tenant information.
     * @deny (update) - Non-owners cannot update tenants.
     * @principle Enforces ownership for tenant management.
     */
    match /tenants/{tenantId} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for the /tenants/{tenantId}/pacientes collection.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}
     * @allow (create) - Only tenant users with valid roles can create patients.
     * @allow (get) - Anyone can read patient data.
     * @deny (update) - Only tenant admins or owners can update patient data.
     * @principle Enforces role-based access control within a tenant.
     */
    match /tenants/{tenantId}/pacientes/{pacienteId} {
      allow get: if isValidTenantUser(tenantId);
      allow list: if isValidTenantUser(tenantId);

      allow create: if isValidTenantUser(tenantId);
      allow update: if isAdminOrOwner(tenantId) && resource != null;
      allow delete: if isAdminOrOwner(tenantId) && resource != null;
    }

    /**
     * @description Rules for the /tenants/{tenantId}/pacientes/{pacienteId}/consultas collection.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId}
     * @allow (create) - Only tenant users with valid roles can create consultations.
     * @allow (get) - Anyone can read consultation data.
     * @deny (update) - Only tenant admins or owners can update consultations.
     * @principle Enforces role-based access control within a tenant.
     */
    match /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId} {
      allow get: if isValidTenantUser(tenantId);
      allow list: if isValidTenantUser(tenantId);

      allow create: if isValidTenantUser(tenantId);
      allow update: if isAdminOrOwner(tenantId) && resource != null;
      allow delete: if isAdminOrOwner(tenantId) && resource != null;
    }

    /**
     * @description Rules for the /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail collection.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId}
     * @allow (create) - Only tenant users with valid roles can create audit entries.
     * @allow (get) - Anyone can read audit entry data.
     * @deny (update) - Only tenant admins or owners can update audit entries.
     * @principle Enforces role-based access control within a tenant.
     */
     match /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId} {
        allow get: if isValidTenantUser(tenantId);
        allow list: if isValidTenantUser(tenantId);

        allow create: if isValidTenantUser(tenantId);
        allow update: if isAdminOrOwner(tenantId) && resource != null;
        allow delete: if isAdminOrOwner(tenantId) && resource != null;
     }

    /**
     * @description Rules for the /tenants/{tenantId}/agendamentos collection.
     * @path /tenants/{tenantId}/agendamentos/{agendamentoId}
     * @allow (create) - Only tenant users with valid roles can create agendamentos.
     * @allow (get) - Anyone can read agendamento data.
     * @deny (update) - Only tenant admins or owners can update agendamentos.
     * @principle Enforces role-based access control within a tenant.
     */
    match /tenants/{tenantId}/agendamentos/{agendamentoId} {
      allow get: if isValidTenantUser(tenantId);
      allow list: if isValidTenantUser(tenantId);

      allow create: if isValidTenantUser(tenantId);
      allow update: if isAdminOrOwner(tenantId) && resource != null;
      allow delete: if isAdminOrOwner(tenantId) && resource != null;
    }

    /**
     * @description Rules for the /tenant_users collection.
     * @path /tenant_users/{docId}
     * @allow (create) - Only allow creation of a tenant_user document if the user ID in the document matches the authenticated user's ID and it matches user ID + tenant ID
     * @allow (get) - Anyone can read a tenant_user document.
     * @deny (update) - No one can update a tenant_user document
     */
    match /tenant_users/{docId} {
        allow get: if true;
        allow list: if false;

        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid
                       && docId == request.resource.data.userId + "_" + request.resource.data.tenantId;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own profile.
     * @allow (get) - An authenticated user can read their own profile.
     * @deny (update) - Users can only update their own profiles.
     * @principle Enforces user-ownership for profile management.
     */
    match /users/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;

        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}