/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset implements a multi-tenant system with strict data isolation.
 * It enforces that tenants can only access their own resources, and customer insights are segregated by tenant.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant profile information.
 * - /customer_insights/{customerInsightId}: Stores customer insights, with a `tenantId` field for authorization.
 *
 * Key Security Decisions:
 * - Tenants can only read and write their own tenant documents.
 * - Customer insights are accessible only if the `tenantId` matches the authenticated user's tenant.
 * - List operations are restricted to prevent unauthorized data discovery.
 *
 * Denormalization for Authorization:
 * - The `customer_insights` collection includes a `tenantId` field directly on each document. This avoids the need to perform expensive `get()` calls to the `tenants` collection to verify tenant ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to tenant profile information.
     * @path /tenants/{tenantId}
     * @allow (create) Authenticated user with matching tenantId creates a new tenant profile.
     * @allow (get) Authenticated user with matching tenantId reads their tenant profile.
     * @allow (update) Authenticated user with matching tenantId updates their tenant profile.
     * @allow (delete) Authenticated user with matching tenantId deletes their tenant profile.
     * @deny (create) Authenticated user attempts to create a tenant profile with a mismatched tenantId.
     * @deny (get) Authenticated user attempts to read a tenant profile with a mismatched tenantId.
     * @deny (update) Authenticated user attempts to update a tenant profile with a mismatched tenantId.
     * @deny (delete) Authenticated user attempts to delete a tenant profile with a mismatched tenantId.
     * @principle Enforces strict tenant ownership for all operations on tenant profiles.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isOwner(tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(tenantId) && request.resource.data.id == tenantId;
      allow update: if isSignedIn() && isExistingOwner(tenantId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(tenantId);
    }

    /**
     * @description Manages access to customer insights, enforcing tenant-based isolation.
     * @path /customer_insights/{customerInsightId}
     * @allow (create) Authenticated user creates a new customer insight with a matching tenantId.
     * @allow (get) Authenticated user reads a customer insight with a matching tenantId.
     * @allow (update) Authenticated user updates a customer insight with a matching tenantId.
     * @allow (delete) Authenticated user deletes a customer insight with a matching tenantId.
     * @deny (create) Authenticated user attempts to create a customer insight with a mismatched tenantId.
     * @deny (get) Authenticated user attempts to read a customer insight with a mismatched tenantId.
     * @deny (update) Authenticated user attempts to update a customer insight with a mismatched tenantId.
     * @deny (delete) Authenticated user attempts to delete a customer insight with a mismatched tenantId.
     * @principle Enforces tenant isolation for customer insights based on the 'tenantId' field.
     */
    match /customer_insights/{customerInsightId} {
      allow get: if isSignedIn() && isTenantResource(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantResource(request.resource.data.tenantId);
      allow update: if isSignedIn() && isExistingTenantResource(resource.data.tenantId);
      allow delete: if isSignedIn() && isExistingTenantResource(resource.data.tenantId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isTenantResource(tenantId) {
        return request.auth.uid == tenantId;
    }

   function isExistingTenantResource(tenantId) {
      return request.auth.uid == tenantId  && resource != null;
    }
  }
}