/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model with user-based access control.
 * Each tenant owns its data, and users are associated with tenants via roles.
 * Data access is restricted based on user authentication and tenant membership.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant-specific data. Each tenant document includes the ownerId of the tenant.
 * - /tenants/{tenantId}/pacientes/{pacienteId}: Stores patient data for each tenant.
 * - /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId}: Stores consultation data for each patient.
 * - /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId}: Stores audit trails for AI summaries.
 * - /tenant_users/{docId}: Maps users to tenants with specific roles. Document ID is automatically generated.
 * - /users/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Tenants can only be created by their owners.
 * - Access to patient data, consultations, and AI audit trails is restricted to users associated with the tenant.
 * - Users can only access their own profile data.
 * - Listing tenants is not allowed.
 *
 * Denormalization for Authorization:
 * - The 'Tenant' entity includes an 'ownerId' field to simplify ownership checks.
 * - The 'TenantUser' entity maps users to tenants and their roles, avoiding complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Users can only read and write their own profiles.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their own profile if authenticated as 'abc'.
     * @allow (get, update, delete) - User 'abc' can get, update, or delete their profile if authenticated as 'abc'.
     * @deny (create) - User 'def' cannot create a profile for user 'abc'.
     * @deny (get, update, delete) - User 'def' cannot get, update, or delete the profile of user 'abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
      allow list: if false;
    }

    /**
     * @description Controls access to the tenant collection. Only authenticated users can create tenants,
     *              and only the owner can read, update, or delete a tenant.
     * @path /tenants/{tenantId}
     * @allow (create) - User 'abc' can create a new tenant and become the owner by setting 'ownerId' to 'abc'.
     * @allow (get, update, delete) - User 'abc' can get, update or delete the tenant if they are the owner ('ownerId' is 'abc').
     * @deny (create) - User 'def' cannot create a new tenant with 'ownerId' set to 'abc'.
     * @deny (get, update, delete) - User 'def' cannot get, update, or delete the tenant owned by 'abc'.
     * @principle Enforces strict ownership for tenant management.
     */
    match /tenants/{tenantId} {
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow get: if isOwner(resource.data.ownerId);
      allow update: if isOwner(resource.data.ownerId) && resource != null;
      allow delete: if isOwner(resource.data.ownerId) && resource != null;
      allow list: if false;
    }

    /**
     * @description Manages access to patient data within a tenant.  Tenant users can create, read, update, and delete patients.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}
     * @allow (create) - A user within the tenant can create a new patient.
     * @allow (get, list, update, delete) - A user within the tenant can read, list, update, and delete patients.
     * @deny (create) - A user not associated with the tenant cannot create a patient.
     * @deny (get, list, update, delete) - A user not associated with the tenant cannot read, list, update, or delete patients.
     * @principle Restricts patient data access to authorized tenant users.
     */
    match /tenants/{tenantId}/pacientes/{pacienteId} {
      function isTenantUser(tenantId) {
        return exists(/databases/$(database)/documents/tenant_users/$(request.auth.uid + "_" + tenantId));
      }
      allow create: if request.auth != null && isTenantUser(tenantId);
      allow get: if request.auth != null && isTenantUser(tenantId);
      allow list: if request.auth != null && isTenantUser(tenantId);
      allow update: if request.auth != null && isTenantUser(tenantId) && resource != null;
      allow delete: if request.auth != null && isTenantUser(tenantId) && resource != null;
    }

    /**
     * @description Controls access to consultation notes for patients.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId}
     * @allow (create) - Tenant users can create consultation notes.
     * @allow (get, list, update, delete) - Tenant users can access and manage consultation notes.
     * @deny (create) - Users outside the tenant cannot create consultation notes.
     * @deny (get, list, update, delete) - Unauthorized users cannot access or manage consultation notes.
     * @principle Restricts consultation data to tenant users.
     */
    match /tenants/{tenantId}/pacientes/{pacienteId}/consultas/{consultaId} {
      function isTenantUser(tenantId) {
        return exists(/databases/$(database)/documents/tenant_users/$(request.auth.uid + "_" + tenantId));
      }
      allow create: if request.auth != null && isTenantUser(tenantId);
      allow get: if request.auth != null && isTenantUser(tenantId);
      allow list: if request.auth != null && isTenantUser(tenantId);
      allow update: if request.auth != null && isTenantUser(tenantId) && resource != null;
      allow delete: if request.auth != null && isTenantUser(tenantId) && resource != null;
    }

    /**
     * @description Manages access to the AI audit trail for a patient.
     * @path /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId}
     * @allow (create) - Tenant users can create audit entries.
     * @allow (get, list, update, delete) - Tenant users can view, list and manage audit entries.
     * @deny (create) - Users outside the tenant cannot create audit entries.
     * @deny (get, list, update, delete) - Unauthorized users cannot view, list or manage audit entries.
     * @principle Limits AI audit trail access to authorized tenant members.
     */
    match /tenants/{tenantId}/pacientes/{pacienteId}/ai_audit_trail/{auditId} {
      function isTenantUser(tenantId) {
        return exists(/databases/$(database)/documents/tenant_users/$(request.auth.uid + "_" + tenantId));
      }
      allow create: if request.auth != null && isTenantUser(tenantId);
      allow get: if request.auth != null && isTenantUser(tenantId);
      allow list: if request.auth != null && isTenantUser(tenantId);
      allow update: if request.auth != null && isTenantUser(tenantId) && resource != null;
      allow delete: if request.auth != null && isTenantUser(tenantId) && resource != null;
    }

    /**
     * @description Controls access to the tenant_users collection, which maps users to tenants.
     * @path /tenant_users/{docId}
     * @allow (create) - Any authenticated user can create a tenant user document to request access to a tenant.
     * @allow (get) - Any authenticated user can get a tenant user document if exists.
     * @allow (update) - Any authenticated user can update tenant user document if exists.
     * @allow (delete) - Any authenticated user can delete tenant user document if exists.
     * @allow (list) - Listing tenant users is disallowed for security reasons.
     * @principle Enforces controlled access to tenant user mappings.
     */
    match /tenant_users/{docId} {
        allow create: if request.auth != null;
        allow get: if request.auth != null;
        allow update: if request.auth != null && resource != null;
        allow delete: if request.auth != null && resource != null;
        allow list: if false;
    }
  }
}